--All credit to github.com/MaximumADHD, I don't even know anything about PNG Decoding.
--Modified by 4lve for use in Starving Artist Auto.

local BinaryReader =
    loadstring(game:HttpGet("https://github.com/MaximumADHD/Roblox-PNG-Library/raw/master/Modules/BinaryReader.lua"))()
local Deflate =
    loadstring(game:HttpGet("https://github.com/MaximumADHD/Roblox-PNG-Library/raw/master/Modules/Deflate.lua"))()
local Unfilter =
    loadstring(game:HttpGet("https://github.com/MaximumADHD/Roblox-PNG-Library/raw/master/Modules/Unfilter.lua"))()

local PNG = {}
PNG.__index = PNG

local chunks = {
    IDAT = [[
        local function IDAT(file, chunk)
            local crc = chunk.CRC
            local hash = file.Hash or 0
            
            local data = chunk.Data
            local buffer = data.Buffer
            
            file.Hash = bit32.bxor(hash, crc)
            file.ZlibStream = file.ZlibStream .. buffer
        end
        
        return IDAT
        ]],
    IEND = [[
        local function IEND(file)
            file.Reading = nil
        end
        
        return IEND
        ]],
    IHDR = [[
        local function IHDR(file, chunk)
            local data = chunk.Data
            
            file.Width = data:ReadInt32();
            file.Height = data:ReadInt32();
            
            file.BitDepth = data:ReadByte();
            file.ColorType = data:ReadByte();
            
            file.Methods =
            {
                Compression = data:ReadByte();
                Filtering   = data:ReadByte();
                Interlace   = data:ReadByte();
            }
        end
        
        return IHDR
        ]],
    PLTE = [[
        local function PLTE(file, chunk)
            if not file.Palette then
                file.Palette = {}
            end
            
            local data = chunk.Data
            local palette = data:ReadAllBytes()
            
            if #palette % 3 ~= 0 then
                error("PNG - Invalid PLTE chunk.")
            end
            
            for i = 1, #palette, 3 do
                local r = palette[i]
                local g = palette[i + 1]
                local b = palette[i + 2]
                
                local color = Color3.fromRGB(r, g, b)
                local index = #file.Palette + 1
                
                file.Palette[index] = color
            end
        end
        
        return PLTE
        ]],
    tEXt = [[
        local function tEXt(file, chunk)
            local data = chunk.Data
            local key, value = "", ""
            
            for byte in data:IterateBytes() do
                local char = string.char(byte)
                
                if char == '\0' then
                    key = value
                    value = ""
                else
                    value = value .. char
                end
            end
            
            file.Metadata[key] = value
        end
        
        return tEXt
        ]],
    tIME = [[
        local function tIME(file, chunk)
            local data = chunk.Data
            
            local timeStamp = 
            {
                Year  = data:ReadUInt16();
                Month = data:ReadByte();
                Day   = data:ReadByte();
                
                Hour   = data:ReadByte();
                Minute = data:ReadByte();
                Second = data:ReadByte();
            }
            
            file.TimeStamp = timeStamp
        end
        
        return tIME
        ]],
    tRNS = [[
        local function tRNS(file, chunk)
            local data = chunk.Data
            
            local bitDepth = file.BitDepth
            local colorType = file.ColorType
            
            bitDepth = (2 ^ bitDepth) - 1
            
            if colorType == 3 then
                local palette = file.Palette
                local alphaMap = {}
                
                for i = 1, #palette do
                    local alpha = data:ReadByte()
                    
                    if not alpha then
                        alpha = 255
                    end
                    
                    alphaMap[i] = alpha
                end
                
                file.AlphaData = alphaMap
            elseif colorType == 0 then
                local grayAlpha = data:ReadUInt16()
                file.Alpha = grayAlpha / bitDepth
            elseif colorType == 2 then
                -- TODO: This seems incorrect...
                local r = data:ReadUInt16() / bitDepth
                local g = data:ReadUInt16() / bitDepth
                local b = data:ReadUInt16() / bitDepth
                file.Alpha = Color3.new(r, g, b)
            else
                error("PNG - Invalid tRNS chunk")
            end	
        end
        
        return tRNS
        ]],
    sRGB = [[
        local function sRGB(file, chunk)
            local data = chunk.Data
            file.RenderIntent = data:ReadByte()
        end
        
        return sRGB
        ]],
    bKGD = [[
        local function bKGD(file, chunk)
            local data = chunk.Data
            
            local bitDepth = file.BitDepth
            local colorType = file.ColorType
            
            bitDepth = (2 ^ bitDepth) - 1
            
            if colorType == 3 then
                local index = data:ReadByte()
                file.BackgroundColor = file.Palette[index]
            elseif colorType == 0 or colorType == 4 then
                local gray = data:ReadUInt16() / bitDepth
                file.BackgroundColor = Color3.fromHSV(0, 0, gray)
            elseif colorType == 2 or colorType == 6 then
                local r = data:ReadUInt16() / bitDepth
                local g = data:ReadUInt16() / bitDepth
                local b = data:ReadUInt16() / bitDepth
                file.BackgroundColor = Color3.new(r, g, b)
            end
        end
        
        return bKGD
        ]],
    cHRM = [[
        local colors = {"White", "Red", "Green", "Blue"}

local function cHRM(file, chunk)
	local chrome = {}
	local data = chunk.Data
	
	for i = 1, 4 do
		local color = colors[i]
		
		chrome[color] =
		{
			[1] = data:ReadUInt32() / 10e4;
			[2] = data:ReadUInt32() / 10e4;
		}
	end
	
	file.Chromaticity = chrome
end

return cHRM
        ]],
    gAMA = [[
        local function gAMA(file, chunk)
            local data = chunk.Data
            local value = data:ReadUInt32()
            file.Gamma = value / 10e4
        end
        
        return gAMA
        ]]
}

local function getBytesPerPixel(colorType)
    if colorType == 0 or colorType == 3 then
        return 1
    elseif colorType == 4 then
        return 2
    elseif colorType == 2 then
        return 3
    elseif colorType == 6 then
        return 4
    else
        return 0
    end
end

local function clampInt(value, min, max)
    local num = tonumber(value) or 0
    num = math.floor(num + .5)

    return math.clamp(num, min, max)
end

local function indexBitmap(file, x, y)
    local width = file.Width
    local height = file.Height

    local x = clampInt(x, 1, width)
    local y = clampInt(y, 1, height)

    local bitmap = file.Bitmap
    local bpp = file.BytesPerPixel

    local i0 = ((x - 1) * bpp) + 1
    local i1 = i0 + bpp

    return bitmap[y], i0, i1
end

function PNG:GetPixel(x, y)
    local row, i0, i1 = indexBitmap(self, x, y)
    local colorType = self.ColorType

    local color, alpha
    do
        if colorType == 0 then
            local gray = unpack(row, i0, i1)
            color = Color3.fromHSV(0, 0, gray)
            alpha = 255
        elseif colorType == 2 then
            local r, g, b = unpack(row, i0, i1)
            color = Color3.fromRGB(r, g, b)
            alpha = 255
        elseif colorType == 3 then
            local palette = self.Palette
            local alphaData = self.AlphaData

            local index = unpack(row, i0, i1)
            index = index + 1

            if palette then
                color = palette[index]
            end

            if alphaData then
                alpha = alphaData[index]
            end
        elseif colorType == 4 then
            local gray, a = unpack(row, i0, i1)
            color = Color3.fromHSV(0, 0, gray)
            alpha = a
        elseif colorType == 6 then
            local r, g, b, a = unpack(row, i0, i1)
            color = Color3.fromRGB(r, g, b, a)
            alpha = a
        end
    end

    if not color then
        color = Color3.new()
    end

    if not alpha then
        alpha = 255
    end

    return color, alpha
end

function PNG.new(buffer)
    -- Create the reader.
    local reader = BinaryReader.new(buffer)

    -- Create the file object.
    local file = {
        Chunks = {},
        Metadata = {},
        Reading = true,
        ZlibStream = ""
    }

    -- Verify the file header.
    local header = reader:ReadString(8)

    if header ~= "\137PNG\r\n\26\n" then
        error("PNG - Input data is not a PNG file.", 2)
    end

    while file.Reading do
        local length = reader:ReadInt32()
        local chunkType = reader:ReadString(4)

        local data, crc

        if length > 0 then
            data = reader:ForkReader(length)
            crc = reader:ReadUInt32()
        end

        local chunk = {
            Length = length,
            Type = chunkType,
            Data = data,
            CRC = crc
        }

        local handler = chunks[chunkType]

        if handler then
            handler = loadstring(handler)()
            handler(file, chunk)
        end

        table.insert(file.Chunks, chunk)
    end

    -- Decompress the zlib stream.
    local success, response =
        pcall(
        function()
            local result = {}
            local index = 0

            Deflate:InflateZlib {
                Input = BinaryReader.new(file.ZlibStream),
                Output = function(byte)
                    index = index + 1
                    result[index] = string.char(byte)
                end
            }

            return table.concat(result)
        end
    )

    if not success then
        error("PNG - Unable to unpack PNG data. " .. tostring(response), 2)
    end

    -- Grab expected info from the file.

    local width = file.Width
    local height = file.Height

    local bitDepth = file.BitDepth
    local colorType = file.ColorType

    local buffer = BinaryReader.new(response)
    file.ZlibStream = nil

    local bitmap = {}
    file.Bitmap = bitmap

    local channels = getBytesPerPixel(colorType)
    file.NumChannels = channels

    local bpp = math.max(1, channels * (bitDepth / 8))
    file.BytesPerPixel = bpp

    -- Unfilter the buffer and
    -- load it into the bitmap.

    for row = 1, height do
        local filterType = buffer:ReadByte()
        local scanline = buffer:ReadBytes(width * bpp, true)

        bitmap[row] = {}

        if filterType == 0 then
            -- None
            Unfilter:None(scanline, bitmap, bpp, row)
        elseif filterType == 1 then
            -- Sub
            Unfilter:Sub(scanline, bitmap, bpp, row)
        elseif filterType == 2 then
            -- Up
            Unfilter:Up(scanline, bitmap, bpp, row)
        elseif filterType == 3 then
            -- Average
            Unfilter:Average(scanline, bitmap, bpp, row)
        elseif filterType == 4 then
            -- Paeth
            Unfilter:Paeth(scanline, bitmap, bpp, row)
        end
    end

    return setmetatable(file, PNG)
end

return PNG
